digraph "call-graph" {
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"
    "<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<android.app.Activity: void <clinit>()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<android.app.Activity: void <clinit>()>";
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<android.app.Activity: void <clinit>()>";
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<android.app.Activity: void <clinit>()>";
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.MainActivity$2: void <init>(com.example.cs5248recordvideo.MainActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity$2: void <init>(com.example.cs5248recordvideo.MainActivity)>";
    "<com.example.cs5248recordvideo.MainActivity$2: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity$2: void onClick(android.view.View)>";
    "<java.lang.Object: void <init>()>"
    "<com.example.cs5248recordvideo.MainActivity$2: void <init>(com.example.cs5248recordvideo.MainActivity)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Object: void finalize()>"
    "<java.lang.Object: void <init>()>"->"<java.lang.Object: void finalize()>";
    "<java.lang.RuntimeException: void <init>(java.lang.String)>"
    "<java.lang.Object: void finalize()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.RuntimeException: void <init>(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Exception: void <init>()>"
    "<java.lang.RuntimeException: void <init>(java.lang.String)>"->"<java.lang.Exception: void <init>()>";
    "<java.lang.Object: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.MainActivity$3: void <init>(com.example.cs5248recordvideo.MainActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity$3: void <init>(com.example.cs5248recordvideo.MainActivity)>";
    "<com.example.cs5248recordvideo.MainActivity$3: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity$3: void onClick(android.view.View)>";
    "<android.content.Intent: void <clinit>()>"
    "<com.example.cs5248recordvideo.MainActivity$3: void onClick(android.view.View)>"->"<android.content.Intent: void <clinit>()>";
    "<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>"
    "<com.example.cs5248recordvideo.MainActivity$3: void onClick(android.view.View)>"->"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>";
    "<com.example.cs5248recordvideo.MainActivity$3: void <init>(com.example.cs5248recordvideo.MainActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.MainActivity$1: void <init>(com.example.cs5248recordvideo.MainActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity$1: void <init>(com.example.cs5248recordvideo.MainActivity)>";
    "<com.example.cs5248recordvideo.MainActivity$1: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity$1: void onClick(android.view.View)>";
    "<com.example.cs5248recordvideo.MainActivity$1: void onClick(android.view.View)>"->"<android.content.Intent: void <clinit>()>";
    "<com.example.cs5248recordvideo.MainActivity$1: void onClick(android.view.View)>"->"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>";
    "<com.example.cs5248recordvideo.MainActivity$1: void <init>(com.example.cs5248recordvideo.MainActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.MainActivity: void <init>()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity: void <init>()>";
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>";
    "<com.example.cs5248recordvideo.MainActivity: boolean onCreateOptionsMenu(android.view.Menu)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.MainActivity: boolean onCreateOptionsMenu(android.view.Menu)>";
    "<android.app.Activity: android.view.MenuInflater getMenuInflater()>"
    "<com.example.cs5248recordvideo.MainActivity: boolean onCreateOptionsMenu(android.view.Menu)>"->"<android.app.Activity: android.view.MenuInflater getMenuInflater()>";
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.MainActivity$3: void <init>(com.example.cs5248recordvideo.MainActivity)>";
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.MainActivity$2: void <init>(com.example.cs5248recordvideo.MainActivity)>";
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.MainActivity$1: void <init>(com.example.cs5248recordvideo.MainActivity)>";
    "<android.app.Activity: void onCreate(android.os.Bundle)>"
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void onCreate(android.os.Bundle)>";
    "<android.app.Activity: void setContentView(int)>"
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setContentView(int)>";
    "<android.app.Activity: android.view.View findViewById(int)>"
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.MainActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<android.app.Activity: void <init>()>"
    "<com.example.cs5248recordvideo.MainActivity: void <init>()>"->"<android.app.Activity: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$1: void <init>(com.example.cs5248recordvideo.PlayerActivity$2)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$2$1: void <init>(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$1: void onPrepared(android.media.MediaPlayer)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$2$1: void onPrepared(android.media.MediaPlayer)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>"
    "<com.example.cs5248recordvideo.PlayerActivity$2$1: void onPrepared(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$1: void onPrepared(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$1: void onPrepared(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$1: void <init>(com.example.cs5248recordvideo.PlayerActivity$2)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void <init>(com.example.cs5248recordvideo.PlayerActivity$2)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$2$2: void <init>(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>";
    "<android.net.Uri: void <clinit>()>"
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<android.net.Uri: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<android.net.Uri: android.net.Uri parse(java.lang.String)>"
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<android.net.Uri: android.net.Uri parse(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: com.example.cs5248recordvideo.PlayerActivity access$0(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<java.lang.StringBuilder: void <init>(java.lang.String)>"
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void <init>(com.example.cs5248recordvideo.PlayerActivity$2)>"->"<java.lang.Object: void <init>()>";
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: java.lang.Runnable access$1(com.example.cs5248recordvideo.PlayerActivity)>"
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.PlayerActivity: java.lang.Runnable access$1(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void access$0(com.example.cs5248recordvideo.PlayerActivity)>"
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.PlayerActivity: void access$0(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<android.app.Activity: void <clinit>()>";
    "<android.os.Handler: void <init>()>"
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<android.os.Handler: void <init>()>";
    "<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>"
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.PlayerActivity$2$2: void <init>(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.PlayerActivity$2$1: void <init>(com.example.cs5248recordvideo.PlayerActivity$2)>";
    "<com.example.cs5248recordvideo.PlayerActivity$3: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$3: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity$3: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity$3: void onClick(android.view.View)>";
    "<com.example.cs5248recordvideo.PlayerActivity$3: void onClick(android.view.View)>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void access$2(com.example.cs5248recordvideo.PlayerActivity,java.lang.String)>"
    "<com.example.cs5248recordvideo.PlayerActivity$3: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.PlayerActivity: void access$2(com.example.cs5248recordvideo.PlayerActivity,java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$3: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void <init>()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>";
    "<java.lang.String: void <clinit>()>"
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: void <init>()>"
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: void <init>()>";
    "<java.lang.String: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.String: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.PlayerActivity$3: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.PlayerActivity$2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void onCreate(android.os.Bundle)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setContentView(int)>";
    "<android.app.Activity: void setRequestedOrientation(int)>"
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setRequestedOrientation(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void selectPlaylist()>"
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.PlayerActivity: void selectPlaylist()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$4: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"
    "<com.example.cs5248recordvideo.PlayerActivity: void selectPlaylist()>"->"<com.example.cs5248recordvideo.PlayerActivity$4: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity$4: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Thread: void <init>(java.lang.Runnable)>"
    "<com.example.cs5248recordvideo.PlayerActivity: void selectPlaylist()>"->"<java.lang.Thread: void <init>(java.lang.Runnable)>";
    "<java.lang.Thread: void start()>"
    "<com.example.cs5248recordvideo.PlayerActivity: void selectPlaylist()>"->"<java.lang.Thread: void start()>";
    "<java.lang.Thread: void run()>"
    "<com.example.cs5248recordvideo.PlayerActivity: void selectPlaylist()>"->"<java.lang.Thread: void run()>";
    "<java.lang.Thread: void start()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"
    "<com.example.cs5248recordvideo.PlayerActivity: void <init>()>"->"<com.example.cs5248recordvideo.PlayerActivity$1: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void <init>()>"->"<android.app.Activity: void <init>()>";
    "<com.example.cs5248recordvideo.RecorderActivity$1: void <init>(com.example.cs5248recordvideo.RecorderActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.RecorderActivity$1: void <init>(com.example.cs5248recordvideo.RecorderActivity)>";
    "<com.example.cs5248recordvideo.RecorderActivity$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.RecorderActivity$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>";
    "<com.example.cs5248recordvideo.RecorderActivity$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void access$1(com.example.cs5248recordvideo.RecorderActivity)>"
    "<com.example.cs5248recordvideo.RecorderActivity$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"->"<com.example.cs5248recordvideo.RecorderActivity: void access$1(com.example.cs5248recordvideo.RecorderActivity)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void access$0(com.example.cs5248recordvideo.RecorderActivity,int,int)>"
    "<com.example.cs5248recordvideo.RecorderActivity$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"->"<com.example.cs5248recordvideo.RecorderActivity: void access$0(com.example.cs5248recordvideo.RecorderActivity,int,int)>";
    "<com.example.cs5248recordvideo.RecorderActivity$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.RecorderActivity$1: void <init>(com.example.cs5248recordvideo.RecorderActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void <init>()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.RecorderActivity: void <init>()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void onCreate(android.os.Bundle)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.RecorderActivity: void onCreate(android.os.Bundle)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void onResume()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.RecorderActivity: void onResume()>";
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>";
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onPrepareOptionsMenu(android.view.Menu)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.RecorderActivity: boolean onPrepareOptionsMenu(android.view.Menu)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void onPause()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.RecorderActivity: void onPause()>";
    "<android.hardware.Camera: android.hardware.Camera open()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void onResume()>"->"<android.hardware.Camera: android.hardware.Camera open()>";
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<android.content.Intent: void <clinit>()>";
    "<android.app.Activity: void onPause()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void onPause()>"->"<android.app.Activity: void onPause()>";
    "<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onPrepareOptionsMenu(android.view.Menu)>"->"<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>";
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>";
    "<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>";
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void stopRecording()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<com.example.cs5248recordvideo.RecorderActivity: void stopRecording()>";
    "<android.app.Activity: void startActivity(android.content.Intent)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<android.app.Activity: void startActivity(android.content.Intent)>";
    "<android.app.Activity: void finish()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean onOptionsItemSelected(android.view.MenuItem)>"->"<android.app.Activity: void finish()>";
    "<java.io.File: void <clinit>()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<java.io.File: void <clinit>()>";
    "<android.util.Log: int e(java.lang.String,java.lang.String)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.util.Log: int e(java.lang.String,java.lang.String)>";
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.util.Log: int e(java.lang.String,java.lang.String)>";
    "<java.io.IOException: void printStackTrace()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void stopRecording()>"->"<java.io.IOException: void printStackTrace()>";
    "<java.lang.Exception: void printStackTrace()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void stopRecording()>"->"<java.lang.Exception: void printStackTrace()>";
    "<java.io.IOException: java.lang.String getMessage()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<java.io.IOException: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<java.io.IOException: void printStackTrace()>";
    "<java.io.IOException: void <init>(java.lang.String)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<java.io.File: java.io.File getParentFile()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<java.io.File: java.io.File getParentFile()>";
    "<java.io.File: boolean exists()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<java.io.File: boolean exists()>";
    "<java.io.File: boolean mkdirs()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<java.io.File: boolean mkdirs()>";
    "<java.io.File: void <init>(java.lang.String)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<android.media.MediaRecorder: void <init>()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void <init>()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void startTimer()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<com.example.cs5248recordvideo.RecorderActivity: void startTimer()>";
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.app.Activity: void finish()>";
    "<com.example.cs5248recordvideo.RecorderActivity$2: void <init>(com.example.cs5248recordvideo.RecorderActivity)>"
    "<com.example.cs5248recordvideo.RecorderActivity: void startTimer()>"->"<com.example.cs5248recordvideo.RecorderActivity$2: void <init>(com.example.cs5248recordvideo.RecorderActivity)>";
    "<com.example.cs5248recordvideo.RecorderActivity$2: void <init>(com.example.cs5248recordvideo.RecorderActivity)>"->"<java.lang.Object: void <init>()>";
    "<android.app.Activity: void runOnUiThread(java.lang.Runnable)>"
    "<com.example.cs5248recordvideo.RecorderActivity: void startTimer()>"->"<android.app.Activity: void runOnUiThread(java.lang.Runnable)>";
    "<android.media.MediaRecorder: void setCamera(android.hardware.Camera)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setCamera(android.hardware.Camera)>";
    "<android.media.MediaRecorder: void setAudioSource(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setAudioSource(int)>";
    "<android.media.MediaRecorder: void setVideoSource(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setVideoSource(int)>";
    "<android.media.MediaRecorder: void setOutputFormat(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setOutputFormat(int)>";
    "<android.media.MediaRecorder: void setAudioEncodingBitRate(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setAudioEncodingBitRate(int)>";
    "<android.media.MediaRecorder: void setAudioChannels(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setAudioChannels(int)>";
    "<android.media.MediaRecorder: void setAudioSamplingRate(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setAudioSamplingRate(int)>";
    "<android.media.MediaRecorder: void setVideoSize(int,int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setVideoSize(int,int)>";
    "<android.media.MediaRecorder: void setVideoEncodingBitRate(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setVideoEncodingBitRate(int)>";
    "<android.media.MediaRecorder: void setOutputFile(java.lang.String)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setOutputFile(java.lang.String)>";
    "<android.media.MediaRecorder: void setVideoFrameRate(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setVideoFrameRate(int)>";
    "<android.media.MediaRecorder: void setAudioEncoder(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setAudioEncoder(int)>";
    "<android.media.MediaRecorder: void setVideoEncoder(int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setVideoEncoder(int)>";
    "<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>";
    "<android.media.MediaRecorder: void setMaxFileSize(long)>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void setMaxFileSize(long)>";
    "<android.media.MediaRecorder: void prepare()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void prepare()>";
    "<android.media.MediaRecorder: void start()>"
    "<com.example.cs5248recordvideo.RecorderActivity: boolean startRecording()>"->"<android.media.MediaRecorder: void start()>";
    "<android.app.Activity: void onResume()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void onResume()>"->"<android.app.Activity: void onResume()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void startPreview()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void onResume()>"->"<com.example.cs5248recordvideo.RecorderActivity: void startPreview()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void onCreate(android.os.Bundle)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setContentView(int)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void <init>()>"->"<com.example.cs5248recordvideo.RecorderActivity$1: void <init>(com.example.cs5248recordvideo.RecorderActivity)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void <init>()>"->"<android.app.Activity: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$1: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity$1: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$1: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity$1: void onClick(android.view.View)>";
    "<com.example.cs5248recordvideo.UploaderActivity$1: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity$4: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void access$3(com.example.cs5248recordvideo.UploaderActivity,android.app.ProgressDialog)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity: void access$3(com.example.cs5248recordvideo.UploaderActivity,android.app.ProgressDialog)>";
    "<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void <init>(com.example.cs5248recordvideo.UploaderActivity$4,android.os.Handler)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity$4$2: void <init>(com.example.cs5248recordvideo.UploaderActivity$4,android.os.Handler)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<java.lang.Thread: void start()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>";
    "<java.lang.System: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$4)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$4)>";
    "<com.example.cs5248recordvideo.UploaderActivity: android.app.ProgressDialog access$4(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: android.app.ProgressDialog access$4(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$4)>";
    "<java.lang.System: long currentTimeMillis()>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$4)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$4)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$4)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void access$5(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void access$5(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$4)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<java.lang.System: long currentTimeMillis()>";
    "<android.os.Looper: void prepare()>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<android.os.Looper: void prepare()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$4$2)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$4$2)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void run()>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void run()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void access$6(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void access$6(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$4)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: com.example.cs5248recordvideo.UploaderActivity$4 access$0(com.example.cs5248recordvideo.UploaderActivity$4$2)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$4$2: com.example.cs5248recordvideo.UploaderActivity$4 access$0(com.example.cs5248recordvideo.UploaderActivity$4$2)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void run()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$4$2)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Thread: void <init>()>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void <init>(com.example.cs5248recordvideo.UploaderActivity$4,android.os.Handler)>"->"<java.lang.Thread: void <init>()>";
    "<java.lang.Thread: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Thread: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<android.os.Handler: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$4)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity$4$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$4)>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$4)>"->"<android.os.Handler: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity$3: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: java.lang.String[] access$2(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity: java.lang.String[] access$2(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void access$1(com.example.cs5248recordvideo.UploaderActivity,java.lang.String[])>"
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity: void access$1(com.example.cs5248recordvideo.UploaderActivity,java.lang.String[])>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<java.lang.String: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$3)>"
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity$3$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$3)>";
    "<com.example.cs5248recordvideo.UploaderActivity$3$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$3)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<java.lang.Thread: void <init>(java.lang.Runnable)>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<java.lang.Thread: void start()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void onClick(android.view.View)>"->"<java.lang.Thread: void run()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity$2: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2: void onClick(android.view.View)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity$2: void onClick(android.view.View)>";
    "<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)>"
    "<com.example.cs5248recordvideo.UploaderActivity$2: void onClick(android.view.View)>"->"<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$2,android.app.ProgressDialog,android.os.Handler)>"
    "<com.example.cs5248recordvideo.UploaderActivity$2: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.UploaderActivity$2$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$2,android.app.ProgressDialog,android.os.Handler)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$2,android.app.ProgressDialog,android.os.Handler)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2: void onClick(android.view.View)>"->"<java.lang.Thread: void <init>(java.lang.Runnable)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2: void onClick(android.view.View)>"->"<java.lang.Thread: void start()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2: void onClick(android.view.View)>"->"<java.lang.Thread: void run()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2: void onClick(android.view.View)>"->"<android.os.Handler: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void <init>()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onDestroy()>"
    "<dummyMainClass: void dummyMainMethod(java.lang.String[])>"->"<com.example.cs5248recordvideo.UploaderActivity: void onDestroy()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<java.lang.String: java.lang.String valueOf(int)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<java.util.Calendar: java.util.Calendar getInstance()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.util.Calendar: java.util.Calendar getInstance()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.io.File: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(int)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<android.app.Activity: void onDestroy()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void onDestroy()>"->"<android.app.Activity: void onDestroy()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.UploaderActivity$4: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.UploaderActivity$3: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.UploaderActivity$2: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<com.example.cs5248recordvideo.UploaderActivity$1: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.io.File: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.io.File: boolean mkdirs()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.text.SimpleDateFormat: void <init>(java.lang.String)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.text.SimpleDateFormat: void <init>(java.lang.String)>";
    "<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void onCreate(android.os.Bundle)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: void setContentView(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void onCreate(android.os.Bundle)>"->"<android.app.Activity: android.view.View findViewById(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void <init>()>"->"<android.app.Activity: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void access$6(com.example.cs5248recordvideo.UploaderActivity)>"->"<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.io.File: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.io.IOException: void printStackTrace()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity$8: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<com.example.cs5248recordvideo.UploaderActivity$8: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$8: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$7: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<com.example.cs5248recordvideo.UploaderActivity$7: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$7: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<java.io.BufferedReader: java.lang.String readLine()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<java.io.BufferedReader: void <init>(java.io.Reader)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.io.BufferedReader: void <init>(java.io.Reader)>";
    "<java.io.FileReader: void <init>(java.io.File)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.io.FileReader: void <init>(java.io.File)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity$6: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<com.example.cs5248recordvideo.UploaderActivity$6: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$6: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$5: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<com.example.cs5248recordvideo.UploaderActivity$5: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$5: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<android.app.AlertDialog$Builder: void <init>(android.content.Context)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: void <init>(android.content.Context)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog show()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog show()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void checkforresumeupload()>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>";
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<android.app.Activity: void finish()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.System: void <clinit>()>";
    "<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.Exception: java.lang.String getMessage()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.Exception: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.io.IOException: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>";
    "<org.apache.http.impl.client.DefaultHttpClient: void <init>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<org.apache.http.impl.client.DefaultHttpClient: void <init>()>";
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>";
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void calltranscodefunction()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void access$5(com.example.cs5248recordvideo.UploaderActivity)>"->"<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.File: void <clinit>()>";
    "<android.os.Message: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<android.os.Message: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.System: void <clinit>()>";
    "<org.apache.http.entity.mime.MultipartEntity: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.entity.mime.MultipartEntity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.File: void <clinit>()>";
    "<org.apache.http.HttpVersion: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.HttpVersion: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<android.os.Message: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.Exception: void printStackTrace()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.IOException: void printStackTrace()>";
    "<java.io.BufferedWriter: void <init>(java.io.Writer)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.BufferedWriter: void <init>(java.io.Writer)>";
    "<java.io.BufferedWriter: void write(java.lang.String)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.BufferedWriter: void write(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.BufferedWriter: void write(java.lang.String)>";
    "<java.io.BufferedWriter: void close()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.BufferedWriter: void close()>";
    "<java.io.FileWriter: void <init>(java.io.File,boolean)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.FileWriter: void <init>(java.io.File,boolean)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.Exception: void printStackTrace()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.IOException: void printStackTrace()>";
    "<org.apache.http.entity.mime.content.FileBody: void <init>(java.io.File,java.lang.String)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.entity.mime.content.FileBody: void <init>(java.io.File,java.lang.String)>";
    "<org.apache.http.entity.mime.MultipartEntity: void <init>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.entity.mime.MultipartEntity: void <init>()>";
    "<org.apache.http.entity.mime.MultipartEntity: void addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.entity.mime.MultipartEntity: void addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>";
    "<org.apache.http.client.methods.HttpPost: void setEntity(org.apache.http.HttpEntity)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.client.methods.HttpPost: void setEntity(org.apache.http.HttpEntity)>";
    "<org.apache.http.client.methods.HttpPost: org.apache.http.RequestLine getRequestLine()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.client.methods.HttpPost: org.apache.http.RequestLine getRequestLine()>";
    "<org.apache.http.client.methods.HttpPost: void abort()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.client.methods.HttpPost: void abort()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.client.methods.HttpPost: void abort()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.client.methods.HttpPost: void abort()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.client.methods.HttpPost: void abort()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.impl.client.DefaultHttpClient: void <init>()>";
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<android.os.Message: void <init>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<android.os.Message: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<android.os.Message: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<android.os.Handler: boolean post(java.lang.Runnable)>"
    "<com.example.cs5248recordvideo.UploaderActivity$4$2: void run()>"->"<android.os.Handler: boolean post(java.lang.Runnable)>";
    "<android.os.Handler: boolean post(java.lang.Runnable)>"->"<com.example.cs5248recordvideo.UploaderActivity$4$2$1: void run()>";
    "<com.example.cs5248recordvideo.UploaderActivity$1: void onClick(android.view.View)>"->"<android.app.Activity: void finish()>";
    "<android.media.MediaRecorder: void stop()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void stopRecording()>"->"<android.media.MediaRecorder: void stop()>";
    "<android.media.MediaRecorder: void release()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void stopRecording()>"->"<android.media.MediaRecorder: void release()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void initPreview(int,int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: void access$0(com.example.cs5248recordvideo.RecorderActivity,int,int)>"->"<com.example.cs5248recordvideo.RecorderActivity: void initPreview(int,int)>";
    "<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>"
    "<com.example.cs5248recordvideo.RecorderActivity: void initPreview(int,int)>"->"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>";
    "<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>"
    "<com.example.cs5248recordvideo.RecorderActivity: void initPreview(int,int)>"->"<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void initPreview(int,int)>"->"<java.lang.Exception: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.RecorderActivity: void initPreview(int,int)>"->"<java.io.IOException: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.RecorderActivity: android.hardware.Camera$Size getBestPreviewSize(int,int,android.hardware.Camera$Parameters)>"
    "<com.example.cs5248recordvideo.RecorderActivity: void initPreview(int,int)>"->"<com.example.cs5248recordvideo.RecorderActivity: android.hardware.Camera$Size getBestPreviewSize(int,int,android.hardware.Camera$Parameters)>";
    "<com.example.cs5248recordvideo.RecorderActivity: void access$1(com.example.cs5248recordvideo.RecorderActivity)>"->"<com.example.cs5248recordvideo.RecorderActivity: void startPreview()>";
    "<com.example.cs5248recordvideo.PlayerActivity$4: void run()>"
    "<java.lang.Thread: void run()>"->"<com.example.cs5248recordvideo.PlayerActivity$4: void run()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3$1: void run()>"
    "<java.lang.Thread: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$3$1: void run()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"
    "<java.lang.Thread: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$3)>"
    "<com.example.cs5248recordvideo.UploaderActivity$3$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$3: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$3)>";
    "<com.example.cs5248recordvideo.UploaderActivity$3$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$3: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$3)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void access$0(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void access$0(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$2)>"
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$2: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$2)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$2$1)>"
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$2$1)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void run()>"
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void run()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: com.example.cs5248recordvideo.UploaderActivity$2 access$0(com.example.cs5248recordvideo.UploaderActivity$2$1)>"
    "<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$2$1: com.example.cs5248recordvideo.UploaderActivity$2 access$0(com.example.cs5248recordvideo.UploaderActivity$2$1)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$2: com.example.cs5248recordvideo.UploaderActivity access$0(com.example.cs5248recordvideo.UploaderActivity$2)>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$2$1)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity$2$1: void run()>"->"<android.os.Handler: boolean post(java.lang.Runnable)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>"
    "<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity$10: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>"->"<com.example.cs5248recordvideo.UploaderActivity$10: void <init>(com.example.cs5248recordvideo.UploaderActivity)>";
    "<com.example.cs5248recordvideo.UploaderActivity$10: void <init>(com.example.cs5248recordvideo.UploaderActivity)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>"->"<android.app.AlertDialog$Builder: void <init>(android.content.Context)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>";
    "<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void alertbox(java.lang.String,java.lang.String)>"->"<android.app.AlertDialog$Builder: android.app.AlertDialog show()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void access$0(com.example.cs5248recordvideo.UploaderActivity)>"->"<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>";
    "<java.lang.Integer: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Integer: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<java.lang.Integer: java.lang.Integer valueOf(int)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<java.lang.Double: java.lang.Double valueOf(double)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Double: java.lang.Double valueOf(double)>";
    "<java.lang.Long: java.lang.Long valueOf(long)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Double: java.lang.Double valueOf(double)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Double: java.lang.Double valueOf(double)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Double: java.lang.Double valueOf(double)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.io.File: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.String: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Integer: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Double: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Long: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Double: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Long: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Double: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Double: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<android.app.Activity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<java.util.logging.Logger: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>"->"<java.util.logging.Logger: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <clinit>()>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <clinit>()>";
    "<java.lang.Double: void <clinit>()>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"->"<java.lang.Long: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void <clinit>()>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void ajc$preClinit()>"
    "<com.coremedia.iso.IsoFile: void <clinit>()>"->"<com.coremedia.iso.IsoFile: void ajc$preClinit()>";
    "<com.coremedia.iso.IsoFile: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void <clinit>()>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: void <clinit>()>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: void <clinit>()>"->"<java.util.logging.Logger: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"->"<java.util.logging.Logger: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"
    "<com.coremedia.iso.IsoFile: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void ajc$preClinit()>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Double: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<java.lang.Float: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Float: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Long: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Short: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Character: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<java.lang.Byte: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Byte: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<java.lang.Void: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.lang.Void: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<java.lang.Float: void <clinit>()>"->"<java.lang.Float: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"->"<java.lang.Short: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Byte: void <clinit>()>"->"<java.lang.Byte: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Void: void <clinit>()>"->"<java.lang.Void: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.Movie: void setTracks(java.util.List)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.Movie: void setTracks(java.util.List)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.Movie: void setTracks(java.util.List)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.Movie: void setTracks(java.util.List)>";
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>"
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>";
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>";
    "<com.googlecode.mp4parser.authoring.Movie: com.googlecode.mp4parser.authoring.Track getTrackByTrackId(long)>"
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<com.googlecode.mp4parser.authoring.Movie: com.googlecode.mp4parser.authoring.Track getTrackByTrackId(long)>";
    "<com.googlecode.mp4parser.authoring.Movie: long getNextTrackId()>"
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<com.googlecode.mp4parser.authoring.Movie: long getNextTrackId()>";
    "<java.util.AbstractSequentialList: java.util.Iterator iterator()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<java.util.LinkedList: java.lang.Object get(int)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<java.util.Hashtable: void <init>()>"
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: void <init>()>";
    "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <clinit>()>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>";
    "<java.lang.Integer: int parseInt(java.lang.String,int)>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.lang.Integer: int parseInt(java.lang.String,int)>";
    "<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class class$(java.lang.String)>"
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<org.aspectj.runtime.reflect.Factory: java.lang.Class class$(java.lang.String)>";
    "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>"
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>";
    "<java.lang.Class: java.lang.Class forName(java.lang.String)>"
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>"->"<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>";
    "<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>"->"<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>";
    "<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>"->"<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>";
    "<org.aspectj.runtime.reflect.SignatureImpl: void <clinit>()>"->"<java.lang.String: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class class$(java.lang.String)>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "<java.lang.Class: java.lang.Class forName(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>"
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class class$(java.lang.String)>"->"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>";
    "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.LinkageError: void <init>()>"
    "<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>"->"<java.lang.LinkageError: void <init>()>";
    "<java.lang.LinkageError: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Error: void <init>()>"
    "<java.lang.LinkageError: void <init>()>"->"<java.lang.Error: void <init>()>";
    "<java.lang.Error: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Throwable: void <init>()>"
    "<java.lang.Error: void <init>()>"->"<java.lang.Throwable: void <init>()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Integer: int parseInt(java.lang.String,int)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>"
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl: void <init>(java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>"->"<org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl: void <init>(java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>";
    "<org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl: void <init>(java.lang.String,org.aspectj.lang.Signature,org.aspectj.lang.reflect.SourceLocation)>"->"<java.lang.Object: void <init>()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>";
    "<org.aspectj.runtime.reflect.SourceLocationImpl: void <init>(java.lang.Class,java.lang.String,int)>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.SourceLocation makeSourceLoc(int,int)>"->"<org.aspectj.runtime.reflect.SourceLocationImpl: void <init>(java.lang.Class,java.lang.String,int)>";
    "<org.aspectj.runtime.reflect.SourceLocationImpl: void <init>(java.lang.Class,java.lang.String,int)>"->"<java.lang.Object: void <init>()>";
    "<org.aspectj.runtime.reflect.MethodSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[],java.lang.Class)>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<org.aspectj.runtime.reflect.MethodSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[],java.lang.Class)>";
    "<org.aspectj.runtime.reflect.CodeSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[])>"
    "<org.aspectj.runtime.reflect.MethodSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[],java.lang.Class)>"->"<org.aspectj.runtime.reflect.CodeSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[])>";
    "<org.aspectj.runtime.reflect.MemberSignatureImpl: void <init>(int,java.lang.String,java.lang.Class)>"
    "<org.aspectj.runtime.reflect.CodeSignatureImpl: void <init>(int,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String[],java.lang.Class[])>"->"<org.aspectj.runtime.reflect.MemberSignatureImpl: void <init>(int,java.lang.String,java.lang.Class)>";
    "<org.aspectj.runtime.reflect.SignatureImpl: void <init>(int,java.lang.String,java.lang.Class)>"
    "<org.aspectj.runtime.reflect.MemberSignatureImpl: void <init>(int,java.lang.String,java.lang.Class)>"->"<org.aspectj.runtime.reflect.SignatureImpl: void <init>(int,java.lang.String,java.lang.Class)>";
    "<org.aspectj.runtime.reflect.SignatureImpl: void <init>(int,java.lang.String,java.lang.Class)>"->"<java.lang.Object: void <init>()>";
    "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
    "<java.util.StringTokenizer: int countTokens()>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: int countTokens()>";
    "<java.util.StringTokenizer: java.lang.String nextToken()>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: int countTokens()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: int countTokens()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<java.lang.String: boolean equals(java.lang.Object)>"
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.String: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
    "<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>"->"<java.lang.Object: void <init>()>";
    "<com.coremedia.iso.IsoFile: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.IsoFile: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.IsoFile: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<java.lang.Class: java.lang.String getName()>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.Class: java.lang.String getName()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"
    "<com.googlecode.mp4parser.AbstractBox: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.googlecode.mp4parser.AbstractBox: void <clinit>()>"->"<java.lang.Class: java.lang.String getName()>";
    "<com.coremedia.iso.IsoFile: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>"->"<java.lang.Class: java.lang.String getName()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"->"<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.lang.System: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<com.googlecode.mp4parser.authoring.DateHelper: java.util.Date convert(long)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.DateHelper: java.util.Date convert(long)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.DateHelper: java.util.Date convert(long)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.lang.Long: void <clinit>()>";
    "<java.util.Date: void <init>(long)>"
    "<com.googlecode.mp4parser.authoring.DateHelper: java.util.Date convert(long)>"->"<java.util.Date: void <init>(long)>";
    "<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getOffset()>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getOffset()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: void <init>(int,int)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: void <init>(int,int)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getCount()>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getCount()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: void setCount(int)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: void setCount(int)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: void <init>(int,int)>"->"<java.lang.Object: void <init>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getDelta()>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getDelta()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getCount()>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getCount()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void setCount(long)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void setCount(long)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>"->"<java.lang.Object: void <init>()>";
    "<java.util.LinkedList: void <init>()>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: void <init>()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: void <init>()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: void <init>()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: void <init>()>";
    "<java.util.LinkedList: int size()>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<java.util.Arrays: void fill(long[],long)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.Arrays: void fill(long[],long)>";
    "<java.util.HashMap: void <init>()>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.HashMap: void <init>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.HashMap: void <init>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.HashMap: void <init>()>";
    "<java.util.HashMap: void putAll(java.util.Map)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.HashMap: void putAll(java.util.Map)>";
    "<java.util.AbstractList: void <init>()>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.AbstractList: void <init>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>";
    "<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.lang.Long: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.lang.Long: void <clinit>()>";
    "<java.util.Collections: void <clinit>()>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.Collections: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<java.util.Collections: void sort(java.util.List)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.Collections: void sort(java.util.List)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.lang.System: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.lang.System: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.Long: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>"->"<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>"->"<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>"->"<java.util.logging.Logger: void <clinit>()>";
    "<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.coremedia.iso.boxes.mdat.MediaDataBox: void <clinit>()>"->"<java.lang.Class: java.lang.String getName()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.util.HashMap: void <init>()>";
    "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.ArrayList: void <init>(java.util.Collection)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "<java.util.ArrayList: int size()>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object get(int)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<java.util.HashMap: java.util.Set keySet()>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.HashMap: java.util.Set keySet()>";
    "<java.util.HashMap: java.lang.Object get(java.lang.Object)>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void splitToArrays(java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.util.LinkedList: void <init>()>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.util.LinkedList: int size()>";
    "<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>"
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.mdat.SampleList: void initIsoFile(com.coremedia.iso.IsoFile)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void setTrackId(long)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setTrackId(long)>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void setCreationTime(java.util.Date)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setCreationTime(java.util.Date)>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void setLanguage(java.lang.String)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setLanguage(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void setModificationTime(java.util.Date)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setModificationTime(java.util.Date)>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void setTimescale(long)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setTimescale(long)>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void setHeight(double)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setHeight(double)>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void setWidth(double)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setWidth(double)>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void setLayer(int)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setLayer(int)>";
    "<java.util.Date: void <init>()>"
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>"->"<java.util.Date: void <init>()>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>"->"<java.util.Date: void <init>()>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<com.googlecode.mp4parser.authoring.AbstractTrack: void <init>()>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.AbstractTrack: void <init>()>";
    "<com.googlecode.mp4parser.authoring.AbstractTrack: void setEnabled(boolean)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.AbstractTrack: void setEnabled(boolean)>";
    "<com.googlecode.mp4parser.authoring.AbstractTrack: void setInMovie(boolean)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.AbstractTrack: void setInMovie(boolean)>";
    "<com.googlecode.mp4parser.authoring.AbstractTrack: void setInPoster(boolean)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.AbstractTrack: void setInPoster(boolean)>";
    "<com.googlecode.mp4parser.authoring.AbstractTrack: void setInPreview(boolean)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<com.googlecode.mp4parser.authoring.AbstractTrack: void setInPreview(boolean)>";
    "<com.googlecode.mp4parser.authoring.AbstractTrack: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: int size()>";
    "<java.util.LinkedList: boolean addAll(java.util.Collection)>"
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: boolean addAll(java.util.Collection)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: boolean addAll(java.util.Collection)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: boolean addAll(java.util.Collection)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: void <init>(com.coremedia.iso.boxes.TrackBox)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<com.googlecode.mp4parser.authoring.Movie: void <init>()>"
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"->"<com.googlecode.mp4parser.authoring.Movie: void <init>()>";
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"->"<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>";
    "<com.googlecode.mp4parser.authoring.Movie: void <init>()>"->"<java.util.LinkedList: void <init>()>";
    "<com.googlecode.mp4parser.authoring.Movie: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>"
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>";
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>";
    "<com.googlecode.mp4parser.authoring.TrackMetaData: long getTrackId()>"
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: long getTrackId()>";
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<com.googlecode.mp4parser.authoring.TrackMetaData: void setTrackId(long)>";
    "<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)>"
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"->"<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)>";
    "<com.coremedia.iso.IsoFile: com.coremedia.iso.boxes.MovieBox getMovieBox()>"
    "<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>"->"<com.coremedia.iso.IsoFile: com.coremedia.iso.boxes.MovieBox getMovieBox()>";
    "<com.coremedia.iso.AbstractBoxParser: void <clinit>()>"
    "<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)>"->"<com.coremedia.iso.AbstractBoxParser: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)>"->"<java.lang.String: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: void <clinit>()>"->"<com.coremedia.iso.AbstractBoxParser: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: void <clinit>()>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: void <clinit>()>"->"<com.coremedia.iso.AbstractBoxParser: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: void <clinit>()>"->"<java.util.logging.Logger: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.coremedia.iso.AbstractBoxParser: void <clinit>()>"->"<java.lang.Class: java.lang.String getName()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"
    "<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)>"->"<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>";
    "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
    "<java.lang.Thread: java.lang.Thread currentThread()>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.lang.Thread: java.lang.Thread currentThread()>";
    "<java.lang.Thread: java.lang.Thread currentThread()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.IOException: void printStackTrace()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.IOException: void printStackTrace()>";
    "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"->"<java.lang.Exception: void <init>()>";
    "<java.io.BufferedInputStream: void <init>(java.io.InputStream)>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
    "<java.io.BufferedInputStream: void close()>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.BufferedInputStream: void close()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.BufferedInputStream: void close()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
    "<java.util.Properties: void <init>()>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.util.Properties: void <init>()>";
    "<java.util.Properties: void load(java.io.InputStream)>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.util.Properties: void load(java.io.InputStream)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.util.Properties: void load(java.io.InputStream)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.util.Properties: void load(java.io.InputStream)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.BufferedInputStream: void close()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.io.BufferedInputStream: void close()>";
    "<com.coremedia.iso.AbstractBoxParser: void <init>()>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<com.coremedia.iso.AbstractBoxParser: void <init>()>";
    "<java.lang.Object: java.lang.Class getClass()>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>"
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>"->"<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>";
    "<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>"
    "<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.IsoFile: com.coremedia.iso.BoxParser createBoxParser()>"
    "<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)>"->"<com.coremedia.iso.IsoFile: com.coremedia.iso.BoxParser createBoxParser()>";
    "<com.coremedia.iso.IsoFile: void parse()>"
    "<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)>"->"<com.coremedia.iso.IsoFile: void parse()>";
    "<com.coremedia.iso.IsoFile: com.coremedia.iso.BoxParser createBoxParser()>"->"<com.coremedia.iso.AbstractBoxParser: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: com.coremedia.iso.BoxParser createBoxParser()>"->"<java.lang.String: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"
    "<com.coremedia.iso.IsoFile: void parse()>"->"<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>";
    "<com.coremedia.iso.ChannelHelper: void <clinit>()>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.ChannelHelper: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
    "<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
    "<com.coremedia.iso.IsoTypeReader: java.lang.String read4cc(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeReader: java.lang.String read4cc(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>";
    "<com.coremedia.iso.IsoTypeWriter: void <clinit>()>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.AbstractBoxParser: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.AbstractBoxParser: void <clinit>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.AbstractBoxParser: void <clinit>()>";
    "<com.coremedia.iso.ChannelHelper: void <clinit>()>"->"<com.coremedia.iso.ChannelHelper: void <clinit>()>";
    "<java.lang.Math: int min(int,int)>"
    "<com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>"->"<java.lang.Math: int min(int,int)>";
    "<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: java.lang.String read4cc(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>"
    "<com.coremedia.iso.IsoTypeReader: java.lang.String read4cc(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>";
    "<com.coremedia.iso.IsoTypeReader: java.lang.String read4cc(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeReader: java.lang.String read4cc(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<java.nio.channels.FileChannel$MapMode: void <clinit>()>"
    "<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>"->"<java.nio.channels.FileChannel$MapMode: void <clinit>()>";
    "<com.coremedia.iso.ChannelHelper: int readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer,int)>"
    "<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>"->"<com.coremedia.iso.ChannelHelper: int readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>"->"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
    "<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>"->"<com.coremedia.iso.ChannelHelper: void <clinit>()>";
    "<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>"->"<com.coremedia.iso.ChannelHelper: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void <clinit>()>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>"->"<java.lang.System: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>"->"<java.lang.Math: int min(int,int)>";
    "<com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>"->"<java.lang.String: void <clinit>()>";
    "<java.io.EOFException: void <init>(java.lang.String)>"
    "<com.coremedia.iso.ChannelHelper: int readFully(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer,int)>"->"<java.io.EOFException: void <init>(java.lang.String)>";
    "<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>"
    "<com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>"->"<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.Throwable: void <init>()>";
    "<java.lang.String: void <init>(byte[],java.lang.String)>"
    "<com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>"->"<java.lang.String: void <init>(byte[],java.lang.String)>";
    "<java.lang.String: void <init>(byte[],java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.String: void <init>(byte[],java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<com.coremedia.iso.IsoTypeWriter: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<java.lang.AssertionError: void <init>()>"
    "<com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>"->"<java.lang.AssertionError: void <init>()>";
    "<java.lang.AssertionError: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.AssertionError: void <init>()>"->"<java.lang.Error: void <init>()>";
    "<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.String: int length()>"
    "<com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>"->"<java.lang.String: int length()>";
    "<java.lang.String: char charAt(int)>"
    "<com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<com.coremedia.iso.ChannelHelper: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.AssertionError: void <init>(java.lang.Object)>";
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.Error: void <init>()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"
    "<com.coremedia.iso.AbstractBoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>"->"<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.InternalError: void <init>(java.lang.String)>"
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "<java.lang.InternalError: void <init>(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.VirtualMachineError: void <init>()>"
    "<java.lang.InternalError: void <init>(java.lang.String)>"->"<java.lang.VirtualMachineError: void <init>()>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: void <init>(com.coremedia.iso.PropertyBoxParserImpl,java.lang.String,byte[],java.lang.String)>"
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: void <init>(com.coremedia.iso.PropertyBoxParserImpl,java.lang.String,byte[],java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: java.lang.String[] getParam()>"
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: java.lang.String[] getParam()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: java.lang.String getClazzName()>"
    "<com.coremedia.iso.PropertyBoxParserImpl: com.coremedia.iso.boxes.Box createBox(java.lang.String,byte[],java.lang.String)>"->"<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: java.lang.String getClazzName()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.String: void <clinit>()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[])>"
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[])>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[])>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.String: void <clinit>()>";
    "<com.coremedia.iso.Hex: void <clinit>()>"
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<com.coremedia.iso.Hex: void <clinit>()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<com.coremedia.iso.Hex: void <clinit>()>";
    "<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[])>"->"<com.coremedia.iso.Hex: void <clinit>()>";
    "<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>"
    "<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[])>"->"<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>";
    "<com.coremedia.iso.Hex: void <clinit>()>"->"<com.coremedia.iso.Hex: void <clinit>()>";
    "<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>"->"<java.lang.String: void <clinit>()>";
    "<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>"->"<com.coremedia.iso.Hex: void <clinit>()>";
    "<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>"->"<com.coremedia.iso.Hex: void <clinit>()>";
    "<java.lang.String: void <init>(char[])>"
    "<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>"->"<java.lang.String: void <init>(char[])>";
    "<java.lang.String: void <init>(char[])>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.String: void <init>(char[])>"->"<java.lang.Object: void <init>()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.lang.String: java.lang.String toUpperCase()>"
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.String: java.lang.String toUpperCase()>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.String: java.lang.String toUpperCase()>";
    "<java.lang.String: java.lang.String[] split(java.lang.String)>"
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<java.lang.String: java.lang.String[] split(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.String: java.lang.String toUpperCase()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: void <init>(com.coremedia.iso.PropertyBoxParserImpl,java.lang.String,byte[],java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<com.coremedia.iso.IsoFile: com.coremedia.iso.BoxParser createBoxParser()>"->"<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>"->"<java.util.LinkedList: void <init>()>";
    "<com.googlecode.mp4parser.AbstractBox: void <init>(java.lang.String)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>"->"<com.googlecode.mp4parser.AbstractBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Long: java.lang.Long valueOf(long)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Double: java.lang.Double valueOf(double)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Integer: java.lang.Integer valueOf(int)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.Exception: void printStackTrace()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.io.IOException: void printStackTrace()>";
    "<java.io.FileOutputStream: void <init>(java.io.File)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.io.FileOutputStream: void <init>(java.io.File)>";
    "<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>";
    "<java.io.FileOutputStream: void close()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.io.FileOutputStream: void close()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>"->"<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void getBox(java.nio.channels.WritableByteChannel)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.coremedia.iso.IsoFile: void getBox(java.nio.channels.WritableByteChannel)>";
    "<com.coremedia.iso.IsoFile: void getBox(java.nio.channels.WritableByteChannel)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void getBox(java.nio.channels.WritableByteChannel)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void getBox(java.nio.channels.WritableByteChannel)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void getBox(java.nio.channels.WritableByteChannel)>"->"<java.lang.AssertionError: void <init>()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie,com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie,com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.ContainerBox getParent()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.ContainerBox getParent()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.ContainerBox getParent()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.ContainerBox getParent()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie,com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: void <init>()>";
    "<java.util.HashMap: java.util.Collection values()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.util.Collection values()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.ArrayList: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.Object: void <init>()>";
    "<java.util.ArrayList: java.util.Iterator iterator()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void <init>(java.lang.String,long,java.util.List)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.FileTypeBox: void <init>(java.lang.String,long,java.util.List)>";
    "<com.coremedia.iso.boxes.FileTypeBox: void <init>(java.lang.String,long,java.util.List)>"->"<java.util.Collections: void <clinit>()>";
    "<java.util.Collections: java.util.List emptyList()>"
    "<com.coremedia.iso.boxes.FileTypeBox: void <init>(java.lang.String,long,java.util.List)>"->"<java.util.Collections: java.util.List emptyList()>";
    "<com.coremedia.iso.boxes.FileTypeBox: void <init>(java.lang.String,long,java.util.List)>"->"<com.googlecode.mp4parser.AbstractBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.IsoFile: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.IsoFile: void <init>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.coremedia.iso.IsoFile: void <init>()>"->"<com.coremedia.iso.AbstractBoxParser: void <clinit>()>";
    "<com.coremedia.iso.IsoFile: void <init>()>"->"<java.lang.String: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void ajc$postClinit()>"
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void ajc$postClinit()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void ajc$postClinit()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void ajc$postClinit()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void <init>()>"
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void ajc$postClinit()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <init>()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.aspectj.runtime.reflect.JoinPointImpl: void <init>(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object[])>"
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>"->"<org.aspectj.runtime.reflect.JoinPointImpl: void <init>(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object[])>";
    "<org.aspectj.runtime.reflect.JoinPointImpl: void <init>(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object[])>"->"<java.lang.Object: void <init>()>";
    "<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>"
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>"->"<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.lang.StringBuffer: void <init>()>"
    "<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuffer: void <init>()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>"
    "<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>"
    "<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
    "<java.lang.StringBuffer: java.lang.String toString()>"
    "<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.StringBuffer: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.AbstractStringBuilder: void <init>()>"
    "<java.lang.StringBuffer: void <init>()>"->"<java.lang.AbstractStringBuilder: void <init>()>";
    "<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<java.lang.Class: java.lang.String getName()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<org.aspectj.runtime.reflect.JoinPointImpl: java.lang.Object getTarget()>"
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<org.aspectj.runtime.reflect.JoinPointImpl: java.lang.Object getTarget()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<org.aspectj.runtime.reflect.JoinPointImpl: java.lang.Object getTarget()>";
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<org.aspectj.runtime.reflect.JoinPointImpl: java.lang.Object getTarget()>";
    "<com.googlecode.mp4parser.AbstractBox: void setParent(com.coremedia.iso.boxes.ContainerBox)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.AbstractBox: void setParent(com.coremedia.iso.boxes.ContainerBox)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void setParent(com.coremedia.iso.boxes.ContainerBox)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void setParent(com.coremedia.iso.boxes.ContainerBox)>";
    "<com.coremedia.iso.IsoFile: void <init>()>"->"<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])>";
    "<com.coremedia.iso.IsoFile: void <init>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: java.util.List putSamples(com.googlecode.mp4parser.authoring.Track,java.util.List)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: java.util.List putSamples(com.googlecode.mp4parser.authoring.Track,java.util.List)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long[] putSampleSizes(com.googlecode.mp4parser.authoring.Track,long[])>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long[] putSampleSizes(com.googlecode.mp4parser.authoring.Track,long[])>";
    "<com.coremedia.iso.boxes.MovieBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getDuration(com.googlecode.mp4parser.authoring.Track)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getDuration(com.googlecode.mp4parser.authoring.Track)>";
    "<com.googlecode.mp4parser.authoring.DateHelper: long convert(java.util.Date)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.DateHelper: long convert(java.util.Date)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.DateHelper: long convert(java.util.Date)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MovieBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.MovieBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.MovieBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"
    "<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<java.util.Date: long getTime()>"
    "<com.googlecode.mp4parser.authoring.DateHelper: long convert(java.util.Date)>"->"<java.util.Date: long getTime()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.Date: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.Date: void <init>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <init>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object intObject(int)>"
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object intObject(int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>"->"<java.lang.Long: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object intObject(int)>"->"<java.lang.Integer: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setNextTrackId(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<java.lang.Integer: void <init>(int)>"
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object intObject(int)>"->"<java.lang.Integer: void <init>(int)>";
    "<java.lang.Integer: void <init>(int)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Number: void <init>()>"
    "<java.lang.Integer: void <init>(int)>"->"<java.lang.Number: void <init>()>";
    "<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>"->"<org.aspectj.runtime.reflect.JoinPointImpl: void <init>(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object[])>";
    "<java.lang.Long: void <init>(long)>"
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>"->"<java.lang.Long: void <init>(long)>";
    "<java.lang.Long: void <init>(long)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Long: void <init>(long)>"->"<java.lang.Number: void <init>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>"->"<com.googlecode.mp4parser.AbstractBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.MovieBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MovieBox: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.coremedia.iso.boxes.MovieBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.Box createUdta(com.googlecode.mp4parser.authoring.Movie)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.Box createUdta(com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.MovieBox createMovieBox(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long gcd(long,long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long gcd(long,long)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getDuration(com.googlecode.mp4parser.authoring.Track)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.DateHelper: long convert(java.util.Date)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.DateHelper: long convert(java.util.Date)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getDuration(com.googlecode.mp4parser.authoring.Track)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.DateHelper: long convert(java.util.Date)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<java.util.logging.Level: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.logging.Level: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.logging.Level: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.logging.Level: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void <clinit>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long gcd(long,long)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long gcd(long,long)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long gcd(long,long)>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<java.util.logging.Logger: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>"
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MediaBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.MediaBox: void <clinit>()>"->"<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.MediaBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void <clinit>()>"->"<com.coremedia.iso.boxes.TrackBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.TrackBox: void <clinit>()>"->"<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.TrackBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.MediaBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.TrackBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: void <init>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>"->"<java.lang.Class: java.lang.String getName()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox$Entry: void <init>(long,long,long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleToChunkBox$Entry: void <init>(long,long,long)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox$Entry: void <init>(long,long,long)>"->"<java.lang.Object: void <init>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <init>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void setChunkOffsets(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void <init>(java.lang.String)>"
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <init>()>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.ChunkOffsetBox: void <init>(java.lang.String)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <init>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void setSampleSizes(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: void <init>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <init>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <init>()>"->"<java.util.Collections: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <init>()>"->"<java.util.Collections: java.util.List emptyList()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <init>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SyncSampleBox: void <init>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"->"<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void setSampleNumber(long[])>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void <init>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <init>()>"->"<java.util.Collections: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <init>()>"->"<java.util.Collections: java.util.List emptyList()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <init>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <init>()>"->"<java.util.Collections: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <init>()>"->"<java.util.Collections: java.util.List emptyList()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void setEntries(java.util.List)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.SampleTableBox: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.coremedia.iso.boxes.SampleTableBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: void <init>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object intObject(int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.DataReferenceBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.DataReferenceBox: void <init>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<com.googlecode.mp4parser.AbstractBox: void setParent(com.coremedia.iso.boxes.ContainerBox)>";
    "<com.googlecode.mp4parser.FullContainerBox: void <init>(java.lang.String)>"
    "<com.coremedia.iso.boxes.DataReferenceBox: void <init>()>"->"<com.googlecode.mp4parser.FullContainerBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.FullContainerBox: void <init>(java.lang.String)>"->"<java.util.LinkedList: void <init>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void <init>(java.lang.String)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.DataInformationBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.DataInformationBox: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.coremedia.iso.boxes.DataInformationBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaInformationBox: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.coremedia.iso.boxes.MediaInformationBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.HandlerBox: void <init>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void setHandlerType(java.lang.String)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.HandlerBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <init>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setLanguage(java.lang.String)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setTimescale(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.MediaBox: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.coremedia.iso.boxes.MediaBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.Date: void <init>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void setFlags(int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractFullBox: void setVersion(int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object intObject(int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object doubleObject(double)>"
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object doubleObject(double)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object doubleObject(double)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object intObject(int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object longObject(long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object floatObject(float)>"
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<org.aspectj.runtime.internal.Conversions: java.lang.Object floatObject(float)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object doubleObject(double)>"->"<java.lang.Double: void <clinit>()>";
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object floatObject(float)>"->"<java.lang.Float: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setVolume(float)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setTrackId(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setModificationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setLayer(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setWidth(double)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setHeight(double)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setDuration(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setCreationTime(long)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void setAlternateGroup(int)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<java.lang.Float: void <init>(float)>"
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object floatObject(float)>"->"<java.lang.Float: void <init>(float)>";
    "<java.lang.Float: void <init>(float)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Float: void <init>(float)>"->"<java.lang.Number: void <init>()>";
    "<java.lang.Double: void <init>(double)>"
    "<org.aspectj.runtime.internal.Conversions: java.lang.Object doubleObject(double)>"->"<java.lang.Double: void <init>(double)>";
    "<java.lang.Double: void <init>(double)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Double: void <init>(double)>"->"<java.lang.Number: void <init>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.TrackBox: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.coremedia.iso.boxes.TrackBox: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>";
    "<com.coremedia.iso.boxes.TrackBox: void <init>()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<java.util.AbstractCollection: boolean isEmpty()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractCollection: boolean isEmpty()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractCollection: boolean isEmpty()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractCollection: boolean isEmpty()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long sum(int[])>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long sum(int[])>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.AssertionError: void <init>(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>";
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>"->"<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>"->"<java.util.HashMap: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>"->"<java.util.HashMap: void <init>()>";
    "<java.util.HashSet: void <init>()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>"->"<java.util.HashSet: void <init>()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.SampleTableBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.MediaBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.MediaInformationBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.HandlerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.SampleSizeBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.ChunkOffsetBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.SyncSampleBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>"->"<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.SampleDescriptionBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.SampleDescriptionBox: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>"
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<com.coremedia.iso.boxes.sampleentry.SampleEntry: void <clinit>()>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
    "<com.coremedia.iso.boxes.sampleentry.SampleEntry: void ajc$preClinit()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.FileTypeBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.MovieBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.TrackBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: void <clinit>()>";
    "<org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>"->"<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <clinit>()>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>"->"<java.lang.AssertionError: void <init>()>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>"->"<java.lang.AssertionError: void <init>()>";
    "<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>"->"<com.googlecode.mp4parser.authoring.AbstractTrack: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: int size()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: int size()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: int size()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.LinkedList: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.LinkedList: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.LinkedList: void <init>()>";
    "<java.io.FileInputStream: void <init>(java.lang.String)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.io.FileInputStream: void <init>(java.lang.String)>";
    "<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>";
    "<java.util.TreeMap: void <init>()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.TreeMap: void <init>()>";
    "<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.HashMap: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.TreeMap: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap: java.util.Set entrySet()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.util.TreeMap: java.util.Set entrySet()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.Exception: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.io.IOException: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<org.apache.http.impl.client.DefaultHttpClient: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void serverFolderCreator()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void streamletsplitting()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity$3$1$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$3$1)>"
    "<com.example.cs5248recordvideo.UploaderActivity$3$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity$3$1$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$3$1)>";
    "<com.example.cs5248recordvideo.UploaderActivity$3$1$1: void <init>(com.example.cs5248recordvideo.UploaderActivity$3$1)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"
    "<com.example.cs5248recordvideo.UploaderActivity$3$1: void run()>"->"<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>";
    "<com.example.cs5248recordvideo.UploaderActivity$3$1: void run()>"->"<android.app.Activity: void runOnUiThread(java.lang.Runnable)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.Exception: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.io.IOException: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<org.apache.http.impl.client.DefaultHttpClient: void <init>()>";
    "<com.example.cs5248recordvideo.UploaderActivity: void showStreamlets()>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$4$1: void <init>(com.example.cs5248recordvideo.PlayerActivity$4)>"
    "<com.example.cs5248recordvideo.PlayerActivity$4: void run()>"->"<com.example.cs5248recordvideo.PlayerActivity$4$1: void <init>(com.example.cs5248recordvideo.PlayerActivity$4)>";
    "<com.example.cs5248recordvideo.PlayerActivity$4$1: void <init>(com.example.cs5248recordvideo.PlayerActivity$4)>"->"<java.lang.Object: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"
    "<com.example.cs5248recordvideo.PlayerActivity$4: void run()>"->"<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>";
    "<com.example.cs5248recordvideo.PlayerActivity$4: void run()>"->"<android.app.Activity: void runOnUiThread(java.lang.Runnable)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.Exception: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.io.IOException: java.lang.String getMessage()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void showMPDPlaylist()>"->"<org.apache.http.impl.client.DefaultHttpClient: void <init>()>";
    "<android.os.Handler: boolean post(java.lang.Runnable)>"->"<com.example.cs5248recordvideo.UploaderActivity$2$1$1: void run()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload(java.lang.String)>"
    "<com.example.cs5248recordvideo.PlayerActivity: void access$2(com.example.cs5248recordvideo.PlayerActivity,java.lang.String)>"->"<com.example.cs5248recordvideo.PlayerActivity: void startDownload(java.lang.String)>";
    "<android.os.AsyncTask: void <clinit>()>"
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload(java.lang.String)>"->"<android.os.AsyncTask: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload(java.lang.String)>"->"<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>"
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload(java.lang.String)>"->"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.Object doInBackground(java.lang.Object[])>"
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload(java.lang.String)>"->"<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.Object doInBackground(java.lang.Object[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.Object doInBackground(java.lang.Object[])>"->"<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: long currentTimeMillis()>";
    "<android.util.Log: int d(java.lang.String,java.lang.String)>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<android.util.Log: int d(java.lang.String,java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<java.io.FileOutputStream: void <init>(java.lang.String)>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void <init>(java.lang.String)>";
    "<java.io.OutputStream: void flush()>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.OutputStream: void flush()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void close()>";
    "<java.io.FileOutputStream: void write(byte[],int,int)>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void write(byte[],int,int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
    "<java.io.InputStream: int read(byte[])>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.InputStream: int read(byte[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.BufferedInputStream: void close()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.net.URL: void <init>(java.lang.String)>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: void <init>(java.lang.String)>";
    "<java.net.URL: java.net.URLConnection openConnection()>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: java.net.URLConnection openConnection()>";
    "<java.net.URL: java.io.InputStream openStream()>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: java.io.InputStream openStream()>";
    "<android.os.AsyncTask: void <init>()>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"->"<android.os.AsyncTask: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload2()>"
    "<com.example.cs5248recordvideo.PlayerActivity: void access$0(com.example.cs5248recordvideo.PlayerActivity)>"->"<com.example.cs5248recordvideo.PlayerActivity: void startDownload2()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload2()>"->"<android.os.AsyncTask: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload2()>"->"<java.lang.String: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload2()>"->"<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload2()>"->"<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.Object doInBackground(java.lang.Object[])>"
    "<com.example.cs5248recordvideo.PlayerActivity: void startDownload2()>"->"<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.Object doInBackground(java.lang.Object[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.Object doInBackground(java.lang.Object[])>"->"<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.Integer: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: long currentTimeMillis()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: long currentTimeMillis()>";
    "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>"
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.System: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.OutputStream: void flush()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void close()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void write(byte[],int,int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.OutputStream: void flush()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void close()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.FileOutputStream: void write(byte[],int,int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.InputStream: int read(byte[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.BufferedInputStream: void close()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.BufferedInputStream: void <init>(java.io.InputStream)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.InputStream: int read(byte[])>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.io.BufferedInputStream: void close()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: java.net.URLConnection openConnection()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: java.io.InputStream openStream()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: java.net.URLConnection openConnection()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: java.lang.String doInBackground(java.lang.String[])>"->"<java.net.URL: java.io.InputStream openStream()>";
    "<com.example.cs5248recordvideo.PlayerActivity$DownloadFileAsync2: void <init>(com.example.cs5248recordvideo.PlayerActivity)>"->"<android.os.AsyncTask: void <init>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void run()>"
    "<com.example.cs5248recordvideo.PlayerActivity$2: void onClick(android.view.View)>"->"<com.example.cs5248recordvideo.PlayerActivity$1: void run()>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void run()>"->"<android.net.Uri: void <clinit>()>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void run()>"->"<android.net.Uri: android.net.Uri parse(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void run()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void run()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void run()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity$1: void run()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"
    "<com.example.cs5248recordvideo.PlayerActivity$1: void run()>"->"<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>"->"<com.example.cs5248recordvideo.PlayerActivity$1: void run()>";
    "<com.example.cs5248recordvideo.PlayerActivity$2$2: void onCompletion(android.media.MediaPlayer)>"->"<com.example.cs5248recordvideo.PlayerActivity: void displaytext()>";
    "<com.example.cs5248recordvideo.MainActivity$1: void onClick(android.view.View)>"->"<android.app.Activity: void startActivity(android.content.Intent)>";
    "<com.example.cs5248recordvideo.MainActivity$3: void onClick(android.view.View)>"->"<android.app.Activity: void startActivity(android.content.Intent)>";
    "<java.lang.Throwable: java.lang.String getMessage()>"
    "<com.example.cs5248recordvideo.RecorderActivity: void initPreview(int,int)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<java.lang.Throwable: java.lang.String getMessage()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.example.cs5248recordvideo.MainActivity$2: void onClick(android.view.View)>"->"<android.app.Activity: void finish()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long[] sampleNumbers(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long[] sampleNumbers(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>";
    "<java.lang.Math: double ceil(double)>"
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long[] sampleNumbers(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.lang.Math: double ceil(double)>";
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long[] sampleNumbers(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.Arrays: void fill(long[],long)>";
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long[] sampleNumbers(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>";
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long[] sampleNumbers(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long getDuration(com.googlecode.mp4parser.authoring.Track)>"
    "<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long[] sampleNumbers(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long getDuration(com.googlecode.mp4parser.authoring.Track)>";
    "<com.googlecode.mp4parser.FullContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.HashSet: boolean add(java.lang.Object)>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long[] putSampleSizes(com.googlecode.mp4parser.authoring.Track,long[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: java.util.List putSamples(com.googlecode.mp4parser.authoring.Track,java.util.List)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean isParsed()>"
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<com.googlecode.mp4parser.AbstractBox: boolean isParsed()>";
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"
    "<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>"->"<com.googlecode.mp4parser.AbstractBox: void parseDetails()>";
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<java.lang.AssertionError: void <init>()>";
    "<com.coremedia.iso.IsoFile: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.IsoFile: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.DataReferenceBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.DataReferenceBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.SyncSampleBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.SampleSizeBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void _parseDetails(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: void parseDetails()>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void _parseDetails(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "<java.lang.Byte: java.lang.Byte valueOf(byte)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.Byte: java.lang.Byte valueOf(byte)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.Byte: java.lang.Byte valueOf(byte)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.Hex: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.System: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.Hex: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.System: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.String: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.Byte: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.Byte: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.Integer: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.String: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: float readFixedPoint88(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: float readFixedPoint88(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: double readFixedPoint1616(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: double readFixedPoint1616(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: double readFixedPoint1616(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: double readFixedPoint1616(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: float readFixedPoint88(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: java.lang.String readIso639(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: java.lang.String readIso639(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: java.lang.String readString(java.nio.ByteBuffer,int)>"
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: java.lang.String readString(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: java.lang.String read4cc(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.CastUtils: int l2i(long)>";
    "<com.coremedia.iso.IsoTypeReader: int byte2int(byte)>"
    "<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int byte2int(byte)>";
    "<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int byte2int(byte)>";
    "<com.coremedia.iso.IsoTypeReader: java.lang.String readIso639(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.Utf8: java.lang.String convert(byte[])>"
    "<com.coremedia.iso.IsoTypeReader: java.lang.String readString(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.Utf8: java.lang.String convert(byte[])>";
    "<com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int byte2int(byte)>";
    "<com.coremedia.iso.Utf8: java.lang.String convert(byte[])>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.Error: void <init>(java.lang.Throwable)>"
    "<com.coremedia.iso.Utf8: java.lang.String convert(byte[])>"->"<java.lang.Error: void <init>(java.lang.Throwable)>";
    "<java.lang.Error: void <init>(java.lang.Throwable)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.Error: void <init>(java.lang.Throwable)>"->"<java.lang.Throwable: void <init>()>";
    "<com.coremedia.iso.Utf8: java.lang.String convert(byte[])>"->"<java.lang.String: void <init>(byte[],java.lang.String)>";
    "<java.lang.StringBuilder: void <init>()>"
    "<com.coremedia.iso.IsoTypeReader: java.lang.String readIso639(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: void <init>()>";
    "<com.coremedia.iso.IsoTypeReader: java.lang.String readIso639(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
    "<com.coremedia.iso.IsoTypeReader: java.lang.String readIso639(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<java.lang.Byte: java.lang.Byte valueOf(byte)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: int readUInt24(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt24(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: int readUInt24(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.IsoTypeReader: int readUInt24(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeReader: int byte2int(byte)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleToChunkBox$Entry: void <init>(long,long,long)>";
    "<java.util.ArrayList: void <init>(int)>"
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.ArrayList: void <init>(int)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: void <init>(int)>"
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: void <init>(int)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: void <init>(int)>"->"<java.lang.Object: void <init>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: void <init>(int,int)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.ArrayList: void <init>(int)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.ArrayList: void <init>(int)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.DataReferenceBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.DataReferenceBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<com.googlecode.mp4parser.util.ByteBufferByteChannel: void <init>(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.ByteBufferByteChannel: void <init>(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.util.ByteBufferByteChannel: void <init>(java.nio.ByteBuffer)>"->"<java.lang.Object: void <init>()>";
    "<com.googlecode.mp4parser.AbstractBox: void setDeadBytes(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void setDeadBytes(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.FullContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.lang.String: boolean endsWith(java.lang.String)>"
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<java.lang.String: java.lang.String substring(int,int)>"
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.String: boolean endsWith(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.HandlerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<java.lang.String: int length()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>"
    "<com.coremedia.iso.boxes.MediaHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: long parseVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void _parseDetails(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.ByteBufferByteChannel: void <init>(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void setDeadBytes(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractContainerBox: long getContentSize()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void getContent(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>";
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.HandlerBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.HandlerBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.DataReferenceBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.DataReferenceBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.DataReferenceBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.DataReferenceBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.DataEntryUrlBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.TimeToSampleBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: long getContentSize()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SyncSampleBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SyncSampleBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleToChunkBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleSizeBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: long getContentSize()>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: long getContentSize()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void getContent(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.StaticChunkOffsetBox: void getContent(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeFixedPont88(java.nio.ByteBuffer,double)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeFixedPont88(java.nio.ByteBuffer,double)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeFixedPont1616(java.nio.ByteBuffer,double)>"
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeFixedPont1616(java.nio.ByteBuffer,double)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.TrackHeaderBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeFixedPont1616(java.nio.ByteBuffer,double)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeFixedPont1616(java.nio.ByteBuffer,double)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeFixedPont88(java.nio.ByteBuffer,double)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>"
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.Utf8: int utf8StringLengthInBytes(java.lang.String)>"
    "<com.coremedia.iso.boxes.HandlerBox: long getContentSize()>"->"<com.coremedia.iso.Utf8: int utf8StringLengthInBytes(java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: long getContentSize()>"->"<com.coremedia.iso.Utf8: int utf8StringLengthInBytes(java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.Utf8: byte[] convert(java.lang.String)>"
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.Utf8: byte[] convert(java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoFile: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataReferenceBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.DataReferenceBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt8(java.nio.ByteBuffer,int)>"
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt8(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int access$0(com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry)>"
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int access$0(com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>";
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void getContent(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt8(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt8(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.coremedia.iso.Utf8: byte[] convert(java.lang.String)>"->"<java.lang.Error: void <init>(java.lang.Throwable)>";
    "<java.lang.RuntimeException: void <init>()>"
    "<com.coremedia.iso.Utf8: int utf8StringLengthInBytes(java.lang.String)>"->"<java.lang.RuntimeException: void <init>()>";
    "<java.lang.RuntimeException: void <init>()>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.RuntimeException: void <init>()>"->"<java.lang.Exception: void <init>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
    "<com.coremedia.iso.IsoTypeWriter: void writeIso639(java.nio.ByteBuffer,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.StaticChunkOffsetBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt24(java.nio.ByteBuffer,int)>"
    "<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt24(java.nio.ByteBuffer,int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt8(java.nio.ByteBuffer,int)>";
    "<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt24(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt24(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt8(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt24(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.IsoTypeWriter: void writeUInt16(java.nio.ByteBuffer,int)>";
    "<com.coremedia.iso.IsoTypeWriter: void writeUInt24(java.nio.ByteBuffer,int)>"->"<com.coremedia.iso.IsoTypeWriter: void <clinit>()>";
    "<com.coremedia.iso.boxes.SampleSizeBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.LinkedList: int size()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: long getContentSize()>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.SampleToChunkBox: long getContentSize()>"->"<java.util.LinkedList: int size()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: long getContentSize()>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.SampleDependencyTypeBox: long getContentSize()>"->"<java.util.LinkedList: int size()>";
    "<com.coremedia.iso.boxes.SyncSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<java.util.LinkedList: int size()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: void getContent(java.nio.ByteBuffer)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: long getContentSize()>"->"<java.util.LinkedList: int size()>";
    "<com.coremedia.iso.boxes.CompositionTimeToSample: long getContentSize()>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.LinkedList: int size()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: long getContentSize()>"->"<java.util.LinkedList: int size()>";
    "<com.coremedia.iso.boxes.TimeToSampleBox: long getContentSize()>"->"<java.util.ArrayList: int size()>";
    "<com.coremedia.iso.boxes.DataEntryUrlBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.DataReferenceBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"
    "<com.coremedia.iso.boxes.DataReferenceBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>";
    "<com.googlecode.mp4parser.FullContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>"
    "<com.coremedia.iso.boxes.DataReferenceBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.FullContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.FullContainerBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.AbstractFullBox: void <clinit>()>";
    "<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>"
    "<com.googlecode.mp4parser.FullContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>"->"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.Exception: void <init>()>";
    "<com.googlecode.mp4parser.FullContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.ByteBufferByteChannel: void <init>(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.FullContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.DataReferenceBox: void getContent(java.nio.ByteBuffer)>"->"<java.util.LinkedList: int size()>";
    "<com.googlecode.mp4parser.FullContainerBox: long getContentSize()>"
    "<com.coremedia.iso.boxes.DataReferenceBox: long getContentSize()>"->"<com.googlecode.mp4parser.FullContainerBox: long getContentSize()>";
    "<com.googlecode.mp4parser.FullContainerBox: long getContentSize()>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.coremedia.iso.boxes.HandlerBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<java.lang.String: byte[] getBytes(java.lang.String)>"
    "<com.coremedia.iso.Utf8: byte[] convert(java.lang.String)>"->"<java.lang.String: byte[] getBytes(java.lang.String)>";
    "<java.lang.String: byte[] getBytes(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "<com.coremedia.iso.Utf8: int utf8StringLengthInBytes(java.lang.String)>"->"<java.lang.String: byte[] getBytes(java.lang.String)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.coremedia.iso.boxes.MediaHeaderBox: long getContentSize()>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.coremedia.iso.boxes.TrackHeaderBox: long getContentSize()>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: void writeVersionAndFlags(java.nio.ByteBuffer)>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.coremedia.iso.boxes.MovieHeaderBox: long getContentSize()>"->"<com.googlecode.mp4parser.AbstractFullBox: int getVersion()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: void getContent(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.AbstractContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>"->"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>"->"<com.googlecode.mp4parser.util.ByteBufferByteChannel: void <init>(java.nio.ByteBuffer)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: long getContentSize()>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: void addBox(com.coremedia.iso.boxes.Box)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.AbstractContainerBox: void <clinit>()>";
    "<java.util.Collections: java.util.List unmodifiableList(java.util.List)>"
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<java.util.Collections: java.util.List unmodifiableList(java.util.List)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<java.util.Collections: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<org.aspectj.runtime.reflect.Factory: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.AbstractBox: void <clinit>()>";
    "<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()>"->"<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox getParent()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox getParent()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox getParent()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox getParent()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()>"->"<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()>";
    "<com.coremedia.iso.IsoFile: void getBox(java.nio.channels.WritableByteChannel)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<java.util.HashSet: java.util.Iterator iterator()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "<java.util.Properties: java.lang.String getProperty(java.lang.String)>"
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox invoke()>"->"<java.util.Properties: java.lang.String getProperty(java.lang.String)>";
    "<com.coremedia.iso.IsoFile: void parse()>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<com.coremedia.iso.IsoFile: com.coremedia.iso.boxes.MovieBox getMovieBox()>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Movie: long getNextTrackId()>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Movie: com.googlecode.mp4parser.authoring.Track getTrackByTrackId(long)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<android.os.Handler: boolean sendMessage(android.os.Message)>"
    "<com.example.cs5248recordvideo.UploaderActivity: void uploadfiles()>"->"<android.os.Handler: boolean sendMessage(android.os.Message)>";
    "<java.util.ArrayList: boolean isEmpty()>"
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.TrackBox createTrackBox(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
}
